int AlphaBeta(int depth,int alpha,int beta) {
　if (depth == 0) {
　　return Evaluate();
　}
　GenerateLegalMoves();
　while (MovesLeft()) {
　　MakeNextMove();
　　val = -AlphaBeta(depth - 1,-beta, -alpha);      //Alpha and Beta are constantly interchangeable. When the function is recursive, Alpha and Beta not only take negative                                                
													//   Number and position exchange
　　UnmakeMove();
　　if (val >= beta) {
　　　return beta;
　　}
　　if (val > alpha) {
　　　alpha = val;
　　}
　}
　return alpha;

//The parameters that this function needs to pass are: the depth to search, the negative infinity, or Alpha, and the positive infinity, Beta: